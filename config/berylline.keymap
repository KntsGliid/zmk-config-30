/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/* Layers */

#define DEF_L 0
#define NAV_L 1
#define SYM_L 2
#define NUM_L 3

/* Shortcuts */

#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define SLALL LC(A)

/* Behavior Settings */

&sk {
    release-after-ms = <250>;
    quick-release;
};

&sl {
    release-after-ms = <250>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NAV_L SYM_L>;
            then-layer = <NUM_L>;
        };
    };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
                20  21  22             23  24  25
                        26  27     28  29              */
        /* Letters */

        escape {
            key-positions = <1 0>;
            bindings = <&kp ESCAPE>;
            layers = <DEF_L>;
        };

        /* Brackets */
        /* Convenience */

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
        };

        revoke {
            bindings = <&mt K_CANCEL Z>;
            key-positions = <20 21>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I  &kp O  &kp P  &kp A  &kp S  &kp D  &kp F  &kp G  &kp H  &kp J  &kp K  &kp L  &kp Z  &mt K_CUT X  &mt K_COPY C  &mt K_PASTE V  &kp B  &kp N  &kp M  &mt LEFT_SHIFT LCTRL  &lt 1 SPACE  &lt 2 SPACE  &kp BACKSPACE
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp N6  &kp NUMBER_7  &kp N8  &kp N9  &kp N0  &kp DEL  &trans  &kp LSHFT  &kp LCTRL  &kp UNDO  &kp PG_DN  &kp LARW  &kp ENTER  &kp RARW  &kp END  &kp CUT  &kp COPY  &kp PASTE  &kp BSPC  &kp DARW  &kp DEL  &trans  &trans  &trans  &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET  &kp AMPS  &kp SEMI  &kp COLON  &kp QMARK  &kp TILDE  &kp EQUAL  &kp MINUS  &kp FSLH  &kp GRAVE  &kp BSLH  &kp LCTRL  &kp LSHFT  &kp LALT  &kp LGUI  &kp UNDER  &kp PLUS  &kp ASTRK  &kp PIPE  &kp LT  &kp GT  &trans  &trans  &trans  &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &none  &none  &none  &none  &none  &none  &trans  &trans  &trans  &trans
            >;
        };
    };
};
